x<- 1:4
y<- 2
x+y
x<-list(2,"a","b", TRUE)
x[[2]]
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
rbind(x,y)
x<-c(17,14,4,5,13,12,10)
x[x>10]<-4
x
q()
help("mean")
ls
ls()
myfunction <-function()
{
x <-rnorm(100)
mean(x)
}
myfunction <-function()
{
x <-rnorm(100)
mean(x)
}
source("function.R")
myfunction <-function()
{
x <-rnorm(100)
mean(x)
}
myfunction()
data()
library("dataset")
library(datasets)
Nile
mean(Nile)
hist(Nile)
hist.default(Nile)
?Nile
q()
oddcount <- function(x)
{
k <- 0
for (n in x)
{
if (n%%2==1) k < k+1
}
return(k)
}
oddcount(c(3,4,5,6,7,8))
oddcount <- function(x)
{
k <- 0
for (n in x)
{
if (n%%2==1) k <- k+1
}
return(k)
}
oddcount(c(3,4,5,6,7,8))
f <- function(x) return(x+y)
y <- 3
f(5)
names <- paste("Rashid ALi", "Sarah Hassan", " Desmond")
names
v <- strsplit(names, " ")
v
v <- strsplit(names, ",")
v
q()
#getwd()
# Set Home Directory
setwd("C:/Users/student/Desktop/KD Homework ")
#*****************Importing Dataset*******************
Tax_Data = read.csv("data.csv")
#*****************Cleaning Dataset**********************
#Package for Analysis of Space-Time Ecological Series
library(pastecs)
#The stat.desc(DF) will return follwing basic and desc statistics of given data frame
# nbr.val, nbr.null, nbr.na, min max, range, sum, median, mean,/SE.mean, CI.mean, var, std.dev, coef.var
stat.desc(Tax_Data)
#convertion of sector from numberic to character data type
Tax_Data$sector = as.character(Tax_Data$sector)
mode(Tax_Data$sector)
#removing typos from sector column
Tax_Data$sector[Tax_Data$sector=="transort"]<-"transport"
Tax_Data$sector[Tax_Data$sector=="transp."]<-"transport"
Tax_Data$sector[Tax_Data$sector=="Agriculture sector"]<-"agriculture"
Tax_Data$sector[Tax_Data$sector=="Retail sector"]<-"retail"
Tax_Data$sector[Tax_Data$sector=="Retail."]<-"retail"
# Removing NAs from dataframe
Tax_Data[is.na(Tax_Data)] <- 0
#Removing outliers from dataframe
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
par(mar = rep(2, 4))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
par(mar = rep(2, 4))
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
#response="y"
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
setwd("C:/Users/student/Desktop/KD Homework ")
install.packages("neuralnet")
?infert
?neuralnet
?neuralnet
setwd("I:/HSE/HSE/Big Data Systems/Advanced Data Analysis&Big Data for Business Intelligence/neural network")
data= read.csv("I:/HSE/HSE/Big Data Systems/Advanced Data Analysis&Big Data
for Business Intelligence/neural network/ASK_BID_LAST 01.04.2015.xlsx",sep=";",dec=",", header=T)
data= read.csv("I:/HSE/HSE/Big Data Systems/Advanced Data Analysis&Big Data
for Business Intelligence/neural network/ASK_BID_LAST 01.04.2015.xlsx", sep=";", dec=",", header=T)
data= read.csv("ASK_BID_LAST 01.04.2015.xlsx", sep=";", dec=",", header=T)
data= read.csv("ASK_BID_LAST 01.04.2015.xlsx", sep=";", dec=",", header=T)
data= read.csv("data.xlsx", sep=";", dec=",", header=T)
data= read.csv("data.csv", sep=";", dec=",", header=T)
data= read.csv("data.csv", sep=";", dec=",", header=T)
data
data1= read.csv("data.csv", sep=";", dec=",", header=T)
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
# import dataset
data1= read.csv("data.csv", sep=";", dec=",", header=T)
nn= neuralnet(result~data1$Date.EUR.BGN.Curncy, data1, hidden=5,threshold=0.01, stepmax=1e6, err.fct = "ce",linear.output = TRUE)
plot(nn)
nn= neuralnet(EUR.BGN.Curncy~EUR.BGN.Curncy, data1, hidden=5,threshold=0.01, stepmax=1e6, err.fct = "ce",linear.output = TRUE)
nn= neuralnet(Date.EUR.BGN.Curncy~Date.EUR.BGN.Curncy, data1, hidden=5,threshold=0.01, stepmax=1e6, err.fct = "ce",linear.output = TRUE)
nn= neuralnet(Date.EUR.BGN.Curncy~Date.EUR.BGN.Curncy, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
data1= read.csv("data.csv", sep=" ", dec=",", header=T)
data1$Curncy
data1= read.csv("data.csv", sep=" ", dec=",", header=T)
data1$Curncy
data1$Date.EUR
data1$Curncy
data1$Date.EUR
data1= read.csv("data.csv", sep=",", dec=",", header=T)
nn= neuralnet(Date.EUR.BGN.Curncy~Date.EUR.BGN.Curncy, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
nn= neuralnet(Date.EURBGNCurncy~Date.EURBGNCurncy, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
data1$Date
data1$EUR.BGN.Curncy
nn= neuralnet(EUR.BGN.Curncy~EUR.BGN.Curncy+Date, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
nn= neuralnet(EUR.BGN.Curncy~EUR.BGN.Curncy+Date, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
nn= neuralnet(EUR.BGN.Curncy~EUR.BGN.Curncy, data1, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
nn= neuralnet(EUR.BGN.Curncy~EUR.BGN.Curncy, data1, hidden=2,threshold=0.01, stepmax=1e6, linear.output = TRUE)
data1$EUR.BGN.Curncy[1:500]
data_set= read.csv("data.csv", sep=",", dec=",", header=T)
colnames(data_set)<-("Date","Curr")
colnames(data_set)<-("Date", "Curr")
colnames(data_set)<-c("Date", "Curr")
data_euro = as.numeric(gsub(",",".", data_set$Curr))
data_euro
test= cbind(data_euro[1:701],data_euro[2:702],data_euro[3:703],data_euro[4:704],data_euro[5:705],data_euro[6:706],data_euro[7:707])
test
ibrary(neuralnet)
# import dataset
data_set= read.csv("data.csv", sep=",", dec=",", header=T)
colnames(data_set)<-c("Date", "Euro")
data_euro = as.numeric(gsub(",",".", data_set$Curr))
test= cbind(data_euro[1:701],data_euro[2:702],data_euro[3:703],data_euro[4:704],data_euro[5:705],data_euro[6:706],data_euro[7:707])
nn= neuralnet(V1~V2+V3+V4+V5+V6+V7, test, hidden=2,threshold=0.01, stepmax=1e6, linear.output = TRUE)
plot(nn)
plot.net(nn)
?plot.net
library(devtools)
install.packages("devtools")
library(devtools)
plot.net(nn)
plot.nnet(nn)
?plot.nnet
install.packages("nnet")
library(nnet)
plot.nnet(nn)
install.packages(" NeuralNetTools")
install.packages("NeuralNetTools")
library(NeuralNetTools)
plot.nnet(nn)
plotnet(nn)
prediction(nn)
library(neuralnet)
# import dataset
data_set= read.csv("data.csv", sep=",", dec=",", header=T)
colnames(data_set)<-c("Date", "Euro")
data_euro = as.numeric(gsub(",",".", data_set$Curr))
test = cbind(data_euro[1:700],data_euro[2:701],data_euro[3:702],data_euro[4:703],data_euro[5:704],data_euro[6:705],data_euro[7:706])
nn= neuralnet(V1~V2+V3+V4+V5+V6+V7, data= test, hidden=10,threshold=0.01, stepmax=1e6, linear.output = TRUE)
plot(nn)
plotnet(nn)
prediction(nn)
library(neuralnet)
# import dataset
data_set= read.csv("data.csv", sep=",", dec=",", header=T)
colnames(data_set)<-c("Date", "Euro")
data_euro = as.numeric(gsub(",",".", data_set$Curr))
test = cbind(data_euro[1:700],data_euro[2:701],data_euro[3:702],data_euro[4:703],
data_euro[5:704],data_euro[6:705],data_euro[7:706])
colnames(test)<-c("V1","V2","V3","V4","V5","V6","V7" )
nn= neuralnet(V1~V2+V3+V4+V5+V6+V7, data= test, hidden=10,
threshold=0.01, stepmax=1e6, linear.output = TRUE)
plot(nn)
plotnet(nn)
prediction(nn)
pr <- as.data.frame(prediction(nn))
test = cbind(data_euro[1:700],data_euro[2:701],data_euro[3:702],data_euro[4:703],
data_euro[5:704],data_euro[6:705],data_euro[7:706])
nn= neuralnet(V1~V2+V3+V4+V5+V6+V7, data= test, hidden=10,
threshold=0.01, stepmax=1e6, linear.output = TRUE)
data <- read.csv('data.csv', sep=";")
colnames(data) <- c("date", "curr")
data$curr <- as.numeric(gsub(",",".",data$curr))
data$date <- strptime(data$date, "%d.%m.%Y %H:%M")
#data0 <- data
#data$date <- as.character(data$date)
plot(data$curr,type="l")
#train.data <- data[1:800,2]
#test.data <- data[801:1000,2]
rm(test)
test <- cbind(data$curr[1:500], data$curr[2:501], data$curr[3:502], data$curr[4:503], data$curr[5:504], data$curr[6:505])
nn <- neuralnet(V1 ~ V2 + V3 + V4 + V5 + V6, data = test,  hidden = 10, threshold = 0.0001, stepmax = 1e6, rep = 1)
plot(nn)
pr <- as.data.frame(prediction(nn))
test <- as.data.frame(test)
install.packages("mongolite")
install.packages("mongodb")
require(devtools)
install_version("mongodb", version = "3.0.1", repos = "http://cran.us.r-project.org")
install.packages("RMongo")
install.packages("rmongodb ")
